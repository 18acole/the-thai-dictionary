Great — below is your **super detailed Replit prompt** that you can copy-paste into Replit's Ghostwriter or share with a Replit AI assistant. It includes everything: project purpose, design style, functionality, integration stack, and future feature ideas. This will ensure the assistant understands exactly what to build and how to structure it.

---

### 🧠 Replit Prompt: Build a Thai Dictionary App with Sanity CMS, Tailwind, Audio, and Vercel V0 Design

---

> **Build me a fully functional Thai dictionary web app.**

### 🎯 **Project Purpose**

I want to build a public-facing web app called **The Thai Dictionary 🇹🇭**.

* The purpose is to help **English and Chinese speakers** learn Thai words and phrases.
* They can **search for a word** in English or Chinese, and find the Thai translation (both in Thai script and Romanized).
* Users can **click a button to hear audio pronunciation**.
* The site is **completely free** – there’s no premium tier, no saved words, and no login system.

---

### 🖼️ **Design Reference**

I will upload a screenshot of a previous version generated by **Vercel V0**. Use this as the **main visual reference** for the layout, fonts, colors, icons, spacing, and overall feel.

It uses a **clean, pastel aesthetic** with soft pinks, purples, yellows and rounded cards. The design uses Tailwind CSS and includes emojis throughout the UI for warmth and clarity.

---

### 📐 **UI Layout and Visual Design Requirements**

#### ✅ Header

* Language toggle on the left: 🌐 "🇺🇸 English" / "🇨🇳 Chinese"
* User icon on the right (placeholder only)

#### ✅ Hero Area

* Big bold title: `The Thai Dictionary 🇹🇭`
* Rounded search bar with emoji placeholder: `🔎 Search Thai words...`
* Gradient "Search" button using pink → purple

#### ✅ Dictionary Table

* Columns:

  * 🇺🇸 English or 🇨🇳 Chinese
  * 🇹🇭 Thai
  * 🔊 Audio (click to play)
* Use Tailwind’s pastel purple and pink palette
* Rows should be hoverable (light pink)
* Rounded corners, soft shadow on the card/table container

#### ✅ Footer

* Emojis: `🇹🇭 🌴 🍍 🌺`
* Light pink links: 📸 Instagram, 🐦 Twitter

---

### 🔊 **Functionality**

#### 1. Search

* Client-side search that filters the dictionary entries as the user types.
* Query matches `english` or `chinese` field, based on the language toggle.

#### 2. Language Toggle

* Toggle between displaying English and Chinese as the source language.
* Controlled by a `useState<"english" | "chinese">("english")`

#### 3. Dictionary Results

* Use data from **Sanity CMS**. Each word document has:

  * `english`: string
  * `chinese`: string
  * `thai`: string
  * `romanized`: string
  * `audio`: file (mp3 or similar)
* Render table rows from Sanity query
* Audio button should use:

  ```ts
  new Audio(audioUrl).play()
  ```

#### 4. CMS Integration

* Use `@sanity/client`
* Use GROQ to query all words:

  ```groq
  *[_type == "word"]{english, chinese, thai, romanized, "audioUrl": audio.asset->url}
  ```
* Fetch the data in `getServerSideProps()` or load at runtime and filter in React.

---

### 🗃️ **Sanity Schema (for reference)**

```ts
export default {
  name: "word",
  type: "document",
  title: "Word",
  fields: [
    { name: "english", type: "string" },
    { name: "chinese", type: "string" },
    { name: "thai", type: "string" },
    { name: "romanized", type: "string" },
    { name: "audio", type: "file" },
  ]
}
```

---

### 📦 Folder Structure

```
/pages
  - index.tsx          → main dictionary page
  - api/request.ts     → (optional: request-a-word form endpoint)
/lib
  - sanity.ts          → sanity client instance
/components
  - Header.tsx
  - SearchBar.tsx
  - DictionaryTable.tsx
  - TableRow.tsx
```

---

### 📬 (Optional Feature) — Word Request Form

This is optional, but if you have time:

* Add a line under the search bar:
  `"Can’t find a word? Request it here 📩"`
* Clicking opens a modal or section with a simple text input
* Submits the word to:

  * Email via EmailJS or
  * Sanity if a `request` schema is added or
  * Replit backend endpoint `/api/request`

---

### ⚙️ Build and Deployment Flow

1. Build and test everything in Replit
2. Push to GitHub (from Replit)
3. Connect GitHub repo to Vercel
4. Add required environment variables:

   * `SANITY_PROJECT_ID`
   * `SANITY_DATASET`
   * `SANITY_API_VERSION`
   * `SANITY_TOKEN` (if write access needed)

---

### ✅ Required Dependencies

```bash
npm install @sanity/client lucide-react clsx tailwindcss postcss autoprefixer
```

---

### 🏁 Final Notes

* Prioritize **clarity and polish** in layout and spacing
* Mobile responsive is important but not complex
* Use **Tailwind** to match the soft visual tone from the screenshot
* Use **emojis** as described above – they are part of the design language
* The site should feel light, fast, and friendly

---

Would you like me to generate a working boilerplate project that matches this?
